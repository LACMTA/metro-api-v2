[{"title":"API 2.0 Documentation Launch ðŸš€","type":0,"sectionRef":"#","url":"/metro-api-v2/blog/api-documentation-launch","content":"","keywords":""},{"title":"API Architectureâ€‹","type":1,"pageTitle":"API 2.0 Documentation Launch ðŸš€","url":"/metro-api-v2/blog/api-documentation-launch#api-architecture","content":"The API is composed of the following: data-loading-service - the backend docker container that routinely executes Python scripts and pandas to load data into the PostgreSQL database.api - the frontend docker container that hosts the connections to the database using fastapi.documentation - a static generated website built with docusaurus. "},{"title":"Dataâ€‹","type":1,"pageTitle":"API 2.0 Documentation Launch ðŸš€","url":"/metro-api-v2/blog/api-documentation-launch#data","content":"put into a PostgreSQL database Data Sourcesâ€‹ GTFS Data "},{"title":"Hello World!","type":0,"sectionRef":"#","url":"/metro-api-v2/blog/hello-world","content":"We'll be making regular blog updates as we work on the API and the documentation site. Our team is small but we've got big dreams and a desire to make our data more open and accessible. Keep an eye on this space as we post about changes, tutorials, etc. It's as much for your information as it is to keep ourselves accountable. Questions/comments are welcomed on our GitHub repository discussions board. We'd love to hear your about any bugs or issues as well!","keywords":""},{"title":"Long Blog Post","type":0,"sectionRef":"#","url":"/metro-api-v2/blog/long-blog-post","content":"Welcome to the dev blog for Metro's API! More content to come!","keywords":""},{"title":"MDX Blog Post","type":0,"sectionRef":"#","url":"/metro-api-v2/blog/mdx-blog-post","content":"Blog posts support Markdown features, such as MDX. tip Use the power of React to create interactive blog posts. &lt;button onClick={() =&gt; alert('button clicked!')}&gt;Click me!&lt;/button&gt; Click me!","keywords":""},{"title":"WebSocket to Me!","type":0,"sectionRef":"#","url":"/metro-api-v2/blog/websocket-to-me","content":"","keywords":""},{"title":"The devil is in the (WebSocket) detailsâ€‹","type":1,"pageTitle":"WebSocket to Me!","url":"/metro-api-v2/blog/websocket-to-me#the-devil-is-in-the-websocket-details","content":"And gosh, were websockets a pain to implement!!! While FastAPI has good support for websockets, our API was not meant for asynchronous calls. Why did we need these asynchronous calls? Well, the data we wanted to send through websockets was live GTFS Real Time data that was also joined to the GTFS Static data. "},{"title":"Technology Stackâ€‹","type":1,"pageTitle":"WebSocket to Me!","url":"/metro-api-v2/blog/websocket-to-me#technology-stack","content":"The API needed to be basically re-done for async calls through asyncpg with aysncio and new updated sqlalchemy commands. "},{"title":"asyncpgâ€‹","type":1,"pageTitle":"WebSocket to Me!","url":"/metro-api-v2/blog/websocket-to-me#asyncpg","content":"We needed to redo the database connection to listen for live updates, so we connected using asyncpg. from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession  We then re-did our SqlAlchemy engine to connect using the async url: async_engine = create_async_engine(create_async_uri(Config.API_DB_URI), echo=False) async_session = sessionmaker(async_engine, expire_on_commit=False, class_=AsyncSession)  Finally we created a new function to connect to the database:  async def get_async_db(): async with async_session() as db: try: yield db finally: await async_engine.dispose()  Phew! "},{"title":"Asynchronously querying the dataâ€‹","type":1,"pageTitle":"WebSocket to Me!","url":"/metro-api-v2/blog/websocket-to-me#asynchronously-querying-the-data","content":"Now that we were connected to the database, we had to re-do the queries! For async calls, SqlAlchemy uses .select instead of .query so our code went from:  the_query = db.query(gtfs_models.VehiclePosition).filter(gtfs_models.VehiclePosition.agency_id == agency_id).all()  to: the_query = await session.execute(select(gtfs_models.VehiclePosition).where(gtfs_models.VehiclePosition.route_code == route_code,gtfs_models.VehiclePosition.agency_id == agency_id))  And the results needed to be converted to scalars:  for row in the_query.scalars().all(): print(row)  All the code is in the API's database.py,main.py, crud.py here: https://github.com/LACMTA/metro-api-v2/tree/main/fastapi/app. "},{"title":"Conclusionâ€‹","type":1,"pageTitle":"WebSocket to Me!","url":"/metro-api-v2/blog/websocket-to-me#conclusion","content":"After being pummeled by websockets for the past couple of weeks, all I can say is that it's been pretty painful. I just can't wait until someone comes up with webmittens next. "},{"title":"FastAPI","type":0,"sectionRef":"#","url":"/metro-api-v2/docs/api/fastapi","content":"Version: 0.1.0 Export OpenAPI Spec FastAPI Authenticationâ€‹ OAuth 2.0: OAuth2PasswordBearer Security Scheme Type:\toauth2 OAuth Flow (password): Token URL: token Scopes:","keywords":""},{"title":"Tutorial Intro","type":0,"sectionRef":"#","url":"/metro-api-v2/docs/intro","content":"Tutorial Intro Let's discover the Metro API in less than 5 minutes by creating a webpage. Getting Startedâ€‹ Get started by creating a new site. What you'll needâ€‹ Node.js version 16.14 or above: When installing Node.js, you are recommended to check all checkboxes related to dependencies. Generate a new siteâ€‹ Generate a new Docusaurus site using the classic template. The classic template will automatically be added to your project after you run the command: npm init docusaurus@latest my-website classic You can type this command into Command Prompt, Powershell, Terminal, or any other integrated terminal of your code editor. The command also installs all necessary dependencies you need to run Docusaurus. Start your siteâ€‹ Run the development server: cd my-website npm run start The cd command changes the directory you're working with. In order to work with your newly created Docusaurus site, you'll need to navigate the terminal there. The npm run start command builds your website locally and serves it through a development server, ready for you to view at http://localhost:3000/. Open docs/intro.md (this page) and edit some lines: the site reloads automatically and displays your changes.","keywords":""}]